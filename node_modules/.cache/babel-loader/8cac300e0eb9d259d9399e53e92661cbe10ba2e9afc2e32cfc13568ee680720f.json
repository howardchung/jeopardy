{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport { getUnhandledProps } from '../../lib';\nimport Checkbox from '../../modules/Checkbox';\n/**\n * A Radio is sugar for <Checkbox radio />.\n * Useful for exclusive groups of sliders or toggles.\n * @see Checkbox\n * @see Form\n */\n\nfunction Radio(props) {\n  var slider = props.slider,\n    toggle = props.toggle,\n    type = props.type;\n  var rest = getUnhandledProps(Radio, props); // const ElementType = getElementType(Radio, props)\n  // radio, slider, toggle are exclusive\n  // use an undefined radio if slider or toggle are present\n\n  var radio = !(slider || toggle) || undefined;\n  return /*#__PURE__*/React.createElement(Checkbox, _extends({}, rest, {\n    type: type,\n    radio: radio,\n    slider: slider,\n    toggle: toggle\n  }));\n}\nRadio.handledProps = [\"slider\", \"toggle\", \"type\"];\nRadio.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Format to emphasize the current selection state. */\n  slider: Checkbox.propTypes.slider,\n  /** Format to show an on or off choice. */\n  toggle: Checkbox.propTypes.toggle,\n  /** HTML input type, either checkbox or radio. */\n  type: Checkbox.propTypes.type\n} : {};\nRadio.defaultProps = {\n  type: 'radio'\n};\nexport default Radio;","map":{"version":3,"names":["_extends","React","getUnhandledProps","Checkbox","Radio","props","slider","toggle","type","rest","radio","undefined","createElement","handledProps","propTypes","process","env","NODE_ENV","defaultProps"],"sources":["/home/runner/work/jeopardy/jeopardy/node_modules/semantic-ui-react/dist/es/addons/Radio/Radio.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport { getUnhandledProps } from '../../lib';\nimport Checkbox from '../../modules/Checkbox';\n/**\n * A Radio is sugar for <Checkbox radio />.\n * Useful for exclusive groups of sliders or toggles.\n * @see Checkbox\n * @see Form\n */\n\nfunction Radio(props) {\n  var slider = props.slider,\n      toggle = props.toggle,\n      type = props.type;\n  var rest = getUnhandledProps(Radio, props); // const ElementType = getElementType(Radio, props)\n  // radio, slider, toggle are exclusive\n  // use an undefined radio if slider or toggle are present\n\n  var radio = !(slider || toggle) || undefined;\n  return /*#__PURE__*/React.createElement(Checkbox, _extends({}, rest, {\n    type: type,\n    radio: radio,\n    slider: slider,\n    toggle: toggle\n  }));\n}\n\nRadio.handledProps = [\"slider\", \"toggle\", \"type\"];\nRadio.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Format to emphasize the current selection state. */\n  slider: Checkbox.propTypes.slider,\n\n  /** Format to show an on or off choice. */\n  toggle: Checkbox.propTypes.toggle,\n\n  /** HTML input type, either checkbox or radio. */\n  type: Checkbox.propTypes.type\n} : {};\nRadio.defaultProps = {\n  type: 'radio'\n};\nexport default Radio;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,iBAAiB,QAAQ,WAAW;AAC7C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAK,CAACC,KAAK,EAAE;EACpB,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAM;IACrBC,MAAM,GAAGF,KAAK,CAACE,MAAM;IACrBC,IAAI,GAAGH,KAAK,CAACG,IAAI;EACrB,IAAIC,IAAI,GAAGP,iBAAiB,CAACE,KAAK,EAAEC,KAAK,CAAC,CAAC,CAAC;EAC5C;EACA;;EAEA,IAAIK,KAAK,GAAG,EAAEJ,MAAM,IAAIC,MAAM,CAAC,IAAII,SAAS;EAC5C,OAAO,aAAaV,KAAK,CAACW,aAAa,CAACT,QAAQ,EAAEH,QAAQ,CAAC,CAAC,CAAC,EAAES,IAAI,EAAE;IACnED,IAAI,EAAEA,IAAI;IACVE,KAAK,EAAEA,KAAK;IACZJ,MAAM,EAAEA,MAAM;IACdC,MAAM,EAAEA;EACV,CAAC,CAAC,CAAC;AACL;AAEAH,KAAK,CAACS,YAAY,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC;AACjDT,KAAK,CAACU,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EACxD;EACAX,MAAM,EAAEH,QAAQ,CAACW,SAAS,CAACR,MAAM;EAEjC;EACAC,MAAM,EAAEJ,QAAQ,CAACW,SAAS,CAACP,MAAM;EAEjC;EACAC,IAAI,EAAEL,QAAQ,CAACW,SAAS,CAACN;AAC3B,CAAC,GAAG,CAAC,CAAC;AACNJ,KAAK,CAACc,YAAY,GAAG;EACnBV,IAAI,EAAE;AACR,CAAC;AACD,eAAeJ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}