{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useWidthProp } from '../../lib';\n/**\n * A set of fields can appear grouped together.\n * @see Form\n */\n\nfunction FormGroup(props) {\n  var children = props.children,\n    className = props.className,\n    grouped = props.grouped,\n    inline = props.inline,\n    unstackable = props.unstackable,\n    widths = props.widths;\n  var classes = cx(useKeyOnly(grouped, 'grouped'), useKeyOnly(inline, 'inline'), useKeyOnly(unstackable, 'unstackable'), useWidthProp(widths, null, true), 'fields', className);\n  var rest = getUnhandledProps(FormGroup, props);\n  var ElementType = getElementType(FormGroup, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\nFormGroup.handledProps = [\"as\", \"children\", \"className\", \"grouped\", \"inline\", \"unstackable\", \"widths\"];\nFormGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Fields can show related choices. */\n  grouped: customPropTypes.every([customPropTypes.disallow(['inline']), PropTypes.bool]),\n  /** Multiple fields may be inline in a row. */\n  inline: customPropTypes.every([customPropTypes.disallow(['grouped']), PropTypes.bool]),\n  /** A form group can prevent itself from stacking on mobile. */\n  unstackable: PropTypes.bool,\n  /** Fields Groups can specify their width in grid columns or automatically divide fields to be equal width. */\n  widths: PropTypes.oneOf([].concat(SUI.WIDTHS, ['equal']))\n} : {};\nexport default FormGroup;","map":{"version":3,"names":["_extends","cx","PropTypes","React","customPropTypes","getElementType","getUnhandledProps","SUI","useKeyOnly","useWidthProp","FormGroup","props","children","className","grouped","inline","unstackable","widths","classes","rest","ElementType","createElement","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","every","disallow","bool","oneOf","concat","WIDTHS"],"sources":["/home/runner/work/jeopardy/jeopardy/node_modules/semantic-ui-react/dist/es/collections/Form/FormGroup.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useWidthProp } from '../../lib';\n/**\n * A set of fields can appear grouped together.\n * @see Form\n */\n\nfunction FormGroup(props) {\n  var children = props.children,\n      className = props.className,\n      grouped = props.grouped,\n      inline = props.inline,\n      unstackable = props.unstackable,\n      widths = props.widths;\n  var classes = cx(useKeyOnly(grouped, 'grouped'), useKeyOnly(inline, 'inline'), useKeyOnly(unstackable, 'unstackable'), useWidthProp(widths, null, true), 'fields', className);\n  var rest = getUnhandledProps(FormGroup, props);\n  var ElementType = getElementType(FormGroup, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nFormGroup.handledProps = [\"as\", \"children\", \"className\", \"grouped\", \"inline\", \"unstackable\", \"widths\"];\nFormGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Fields can show related choices. */\n  grouped: customPropTypes.every([customPropTypes.disallow(['inline']), PropTypes.bool]),\n\n  /** Multiple fields may be inline in a row. */\n  inline: customPropTypes.every([customPropTypes.disallow(['grouped']), PropTypes.bool]),\n\n  /** A form group can prevent itself from stacking on mobile. */\n  unstackable: PropTypes.bool,\n\n  /** Fields Groups can specify their width in grid columns or automatically divide fields to be equal width. */\n  widths: PropTypes.oneOf([].concat(SUI.WIDTHS, ['equal']))\n} : {};\nexport default FormGroup;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,EAAE,MAAM,MAAM;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,GAAG,EAAEC,UAAU,EAAEC,YAAY,QAAQ,WAAW;AAC7G;AACA;AACA;AACA;;AAEA,SAASC,SAAS,CAACC,KAAK,EAAE;EACxB,IAAIC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;IACzBC,SAAS,GAAGF,KAAK,CAACE,SAAS;IAC3BC,OAAO,GAAGH,KAAK,CAACG,OAAO;IACvBC,MAAM,GAAGJ,KAAK,CAACI,MAAM;IACrBC,WAAW,GAAGL,KAAK,CAACK,WAAW;IAC/BC,MAAM,GAAGN,KAAK,CAACM,MAAM;EACzB,IAAIC,OAAO,GAAGjB,EAAE,CAACO,UAAU,CAACM,OAAO,EAAE,SAAS,CAAC,EAAEN,UAAU,CAACO,MAAM,EAAE,QAAQ,CAAC,EAAEP,UAAU,CAACQ,WAAW,EAAE,aAAa,CAAC,EAAEP,YAAY,CAACQ,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,QAAQ,EAAEJ,SAAS,CAAC;EAC7K,IAAIM,IAAI,GAAGb,iBAAiB,CAACI,SAAS,EAAEC,KAAK,CAAC;EAC9C,IAAIS,WAAW,GAAGf,cAAc,CAACK,SAAS,EAAEC,KAAK,CAAC;EAClD,OAAO,aAAaR,KAAK,CAACkB,aAAa,CAACD,WAAW,EAAEpB,QAAQ,CAAC,CAAC,CAAC,EAAEmB,IAAI,EAAE;IACtEN,SAAS,EAAEK;EACb,CAAC,CAAC,EAAEN,QAAQ,CAAC;AACf;AAEAF,SAAS,CAACY,YAAY,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,CAAC;AACtGZ,SAAS,CAACa,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EAC5D;EACAC,EAAE,EAAEzB,SAAS,CAAC0B,WAAW;EAEzB;EACAhB,QAAQ,EAAEV,SAAS,CAAC2B,IAAI;EAExB;EACAhB,SAAS,EAAEX,SAAS,CAAC4B,MAAM;EAE3B;EACAhB,OAAO,EAAEV,eAAe,CAAC2B,KAAK,CAAC,CAAC3B,eAAe,CAAC4B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE9B,SAAS,CAAC+B,IAAI,CAAC,CAAC;EAEtF;EACAlB,MAAM,EAAEX,eAAe,CAAC2B,KAAK,CAAC,CAAC3B,eAAe,CAAC4B,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE9B,SAAS,CAAC+B,IAAI,CAAC,CAAC;EAEtF;EACAjB,WAAW,EAAEd,SAAS,CAAC+B,IAAI;EAE3B;EACAhB,MAAM,EAAEf,SAAS,CAACgC,KAAK,CAAC,EAAE,CAACC,MAAM,CAAC5B,GAAG,CAAC6B,MAAM,EAAE,CAAC,OAAO,CAAC,CAAC;AAC1D,CAAC,GAAG,CAAC,CAAC;AACN,eAAe1B,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}