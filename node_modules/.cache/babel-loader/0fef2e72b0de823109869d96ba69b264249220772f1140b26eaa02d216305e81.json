{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A table row can have cells.\n */\n\nfunction TableCell(props) {\n  var active = props.active,\n    children = props.children,\n    className = props.className,\n    collapsing = props.collapsing,\n    content = props.content,\n    disabled = props.disabled,\n    error = props.error,\n    icon = props.icon,\n    negative = props.negative,\n    positive = props.positive,\n    selectable = props.selectable,\n    singleLine = props.singleLine,\n    textAlign = props.textAlign,\n    verticalAlign = props.verticalAlign,\n    warning = props.warning,\n    width = props.width;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(width, 'wide'), className);\n  var rest = getUnhandledProps(TableCell, props);\n  var ElementType = getElementType(TableCell, props);\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), Icon.create(icon), content);\n}\nTableCell.handledProps = [\"active\", \"as\", \"children\", \"className\", \"collapsing\", \"content\", \"disabled\", \"error\", \"icon\", \"negative\", \"positive\", \"selectable\", \"singleLine\", \"textAlign\", \"verticalAlign\", \"warning\", \"width\"];\nTableCell.defaultProps = {\n  as: 'td'\n};\nTableCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n  /** A cell can be active or selected by a user. */\n  active: PropTypes.bool,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** A cell can be collapsing so that it only uses as much space as required. */\n  collapsing: PropTypes.bool,\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n  /** A cell can be disabled. */\n  disabled: PropTypes.bool,\n  /** A cell may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n  /** Add an Icon by name, props object, or pass an <Icon /> */\n  icon: customPropTypes.itemShorthand,\n  /** A cell may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n  /** A cell may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n  /** A cell can be selectable. */\n  selectable: PropTypes.bool,\n  /** A cell can specify that its contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n  /** A table cell can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n  /** A table cell can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n  /** A cell may warn a user. */\n  warning: PropTypes.bool,\n  /** A table can specify the width of individual columns independently. */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nTableCell.create = createShorthandFactory(TableCell, function (content) {\n  return {\n    content: content\n  };\n});\nexport default TableCell;","map":{"version":3,"names":["_extends","_without","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getElementType","getUnhandledProps","SUI","useKeyOnly","useTextAlignProp","useVerticalAlignProp","useWidthProp","Icon","TableCell","props","active","children","className","collapsing","content","disabled","error","icon","negative","positive","selectable","singleLine","textAlign","verticalAlign","warning","width","classes","rest","ElementType","isNil","createElement","create","handledProps","defaultProps","as","propTypes","process","env","NODE_ENV","elementType","bool","node","string","contentShorthand","itemShorthand","oneOf","TEXT_ALIGNMENTS","VERTICAL_ALIGNMENTS","WIDTHS"],"sources":["/home/runner/work/jeopardy/jeopardy/node_modules/semantic-ui-react/dist/es/collections/Table/TableCell.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A table row can have cells.\n */\n\nfunction TableCell(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      content = props.content,\n      disabled = props.disabled,\n      error = props.error,\n      icon = props.icon,\n      negative = props.negative,\n      positive = props.positive,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning,\n      width = props.width;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(width, 'wide'), className);\n  var rest = getUnhandledProps(TableCell, props);\n  var ElementType = getElementType(TableCell, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), Icon.create(icon), content);\n}\n\nTableCell.handledProps = [\"active\", \"as\", \"children\", \"className\", \"collapsing\", \"content\", \"disabled\", \"error\", \"icon\", \"negative\", \"positive\", \"selectable\", \"singleLine\", \"textAlign\", \"verticalAlign\", \"warning\", \"width\"];\nTableCell.defaultProps = {\n  as: 'td'\n};\nTableCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A cell can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A cell can be collapsing so that it only uses as much space as required. */\n  collapsing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A cell can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A cell may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** Add an Icon by name, props object, or pass an <Icon /> */\n  icon: customPropTypes.itemShorthand,\n\n  /** A cell may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A cell may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A cell can be selectable. */\n  selectable: PropTypes.bool,\n\n  /** A cell can specify that its contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table cell can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table cell can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A cell may warn a user. */\n  warning: PropTypes.bool,\n\n  /** A table can specify the width of individual columns independently. */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nTableCell.create = createShorthandFactory(TableCell, function (content) {\n  return {\n    content: content\n  };\n});\nexport default TableCell;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,EAAE,MAAM,MAAM;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,sBAAsB,EAAEC,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,GAAG,EAAEC,UAAU,EAAEC,gBAAgB,EAAEC,oBAAoB,EAAEC,YAAY,QAAQ,WAAW;AAC5L,OAAOC,IAAI,MAAM,qBAAqB;AACtC;AACA;AACA;;AAEA,SAASC,SAAS,CAACC,KAAK,EAAE;EACxB,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAM;IACrBC,QAAQ,GAAGF,KAAK,CAACE,QAAQ;IACzBC,SAAS,GAAGH,KAAK,CAACG,SAAS;IAC3BC,UAAU,GAAGJ,KAAK,CAACI,UAAU;IAC7BC,OAAO,GAAGL,KAAK,CAACK,OAAO;IACvBC,QAAQ,GAAGN,KAAK,CAACM,QAAQ;IACzBC,KAAK,GAAGP,KAAK,CAACO,KAAK;IACnBC,IAAI,GAAGR,KAAK,CAACQ,IAAI;IACjBC,QAAQ,GAAGT,KAAK,CAACS,QAAQ;IACzBC,QAAQ,GAAGV,KAAK,CAACU,QAAQ;IACzBC,UAAU,GAAGX,KAAK,CAACW,UAAU;IAC7BC,UAAU,GAAGZ,KAAK,CAACY,UAAU;IAC7BC,SAAS,GAAGb,KAAK,CAACa,SAAS;IAC3BC,aAAa,GAAGd,KAAK,CAACc,aAAa;IACnCC,OAAO,GAAGf,KAAK,CAACe,OAAO;IACvBC,KAAK,GAAGhB,KAAK,CAACgB,KAAK;EACvB,IAAIC,OAAO,GAAGhC,EAAE,CAACS,UAAU,CAACO,MAAM,EAAE,QAAQ,CAAC,EAAEP,UAAU,CAACU,UAAU,EAAE,YAAY,CAAC,EAAEV,UAAU,CAACY,QAAQ,EAAE,UAAU,CAAC,EAAEZ,UAAU,CAACa,KAAK,EAAE,OAAO,CAAC,EAAEb,UAAU,CAACe,QAAQ,EAAE,UAAU,CAAC,EAAEf,UAAU,CAACgB,QAAQ,EAAE,UAAU,CAAC,EAAEhB,UAAU,CAACiB,UAAU,EAAE,YAAY,CAAC,EAAEjB,UAAU,CAACkB,UAAU,EAAE,aAAa,CAAC,EAAElB,UAAU,CAACqB,OAAO,EAAE,SAAS,CAAC,EAAEpB,gBAAgB,CAACkB,SAAS,CAAC,EAAEjB,oBAAoB,CAACkB,aAAa,CAAC,EAAEjB,YAAY,CAACmB,KAAK,EAAE,MAAM,CAAC,EAAEb,SAAS,CAAC;EAC7a,IAAIe,IAAI,GAAG1B,iBAAiB,CAACO,SAAS,EAAEC,KAAK,CAAC;EAC9C,IAAImB,WAAW,GAAG5B,cAAc,CAACQ,SAAS,EAAEC,KAAK,CAAC;EAElD,IAAI,CAACZ,aAAa,CAACgC,KAAK,CAAClB,QAAQ,CAAC,EAAE;IAClC,OAAO,aAAaf,KAAK,CAACkC,aAAa,CAACF,WAAW,EAAEpC,QAAQ,CAAC,CAAC,CAAC,EAAEmC,IAAI,EAAE;MACtEf,SAAS,EAAEc;IACb,CAAC,CAAC,EAAEf,QAAQ,CAAC;EACf;EAEA,OAAO,aAAaf,KAAK,CAACkC,aAAa,CAACF,WAAW,EAAEpC,QAAQ,CAAC,CAAC,CAAC,EAAEmC,IAAI,EAAE;IACtEf,SAAS,EAAEc;EACb,CAAC,CAAC,EAAEnB,IAAI,CAACwB,MAAM,CAACd,IAAI,CAAC,EAAEH,OAAO,CAAC;AACjC;AAEAN,SAAS,CAACwB,YAAY,GAAG,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,YAAY,EAAE,YAAY,EAAE,WAAW,EAAE,eAAe,EAAE,SAAS,EAAE,OAAO,CAAC;AAC9NxB,SAAS,CAACyB,YAAY,GAAG;EACvBC,EAAE,EAAE;AACN,CAAC;AACD1B,SAAS,CAAC2B,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EAC5D;EACAJ,EAAE,EAAEvC,SAAS,CAAC4C,WAAW;EAEzB;EACA7B,MAAM,EAAEf,SAAS,CAAC6C,IAAI;EAEtB;EACA7B,QAAQ,EAAEhB,SAAS,CAAC8C,IAAI;EAExB;EACA7B,SAAS,EAAEjB,SAAS,CAAC+C,MAAM;EAE3B;EACA7B,UAAU,EAAElB,SAAS,CAAC6C,IAAI;EAE1B;EACA1B,OAAO,EAAEf,eAAe,CAAC4C,gBAAgB;EAEzC;EACA5B,QAAQ,EAAEpB,SAAS,CAAC6C,IAAI;EAExB;EACAxB,KAAK,EAAErB,SAAS,CAAC6C,IAAI;EAErB;EACAvB,IAAI,EAAElB,eAAe,CAAC6C,aAAa;EAEnC;EACA1B,QAAQ,EAAEvB,SAAS,CAAC6C,IAAI;EAExB;EACArB,QAAQ,EAAExB,SAAS,CAAC6C,IAAI;EAExB;EACApB,UAAU,EAAEzB,SAAS,CAAC6C,IAAI;EAE1B;EACAnB,UAAU,EAAE1B,SAAS,CAAC6C,IAAI;EAE1B;EACAlB,SAAS,EAAE3B,SAAS,CAACkD,KAAK,CAACpD,QAAQ,CAACS,GAAG,CAAC4C,eAAe,EAAE,WAAW,CAAC,CAAC;EAEtE;EACAvB,aAAa,EAAE5B,SAAS,CAACkD,KAAK,CAAC3C,GAAG,CAAC6C,mBAAmB,CAAC;EAEvD;EACAvB,OAAO,EAAE7B,SAAS,CAAC6C,IAAI;EAEvB;EACAf,KAAK,EAAE9B,SAAS,CAACkD,KAAK,CAAC3C,GAAG,CAAC8C,MAAM;AACnC,CAAC,GAAG,CAAC,CAAC;AACNxC,SAAS,CAACuB,MAAM,GAAGjC,sBAAsB,CAACU,SAAS,EAAE,UAAUM,OAAO,EAAE;EACtE,OAAO;IACLA,OAAO,EAAEA;EACX,CAAC;AACH,CAAC,CAAC;AACF,eAAeN,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}