{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getElementType, getUnhandledProps } from '../../lib';\n/**\n * Button groups can contain conditionals.\n */\n\nfunction ButtonOr(props) {\n  var className = props.className,\n    text = props.text;\n  var classes = cx('or', className);\n  var rest = getUnhandledProps(ButtonOr, props);\n  var ElementType = getElementType(ButtonOr, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes,\n    \"data-text\": text\n  }));\n}\nButtonOr.handledProps = [\"as\", \"className\", \"text\"];\nButtonOr.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Or buttons can have their text localized, or adjusted by using the text prop. */\n  text: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : {};\nexport default ButtonOr;","map":{"version":3,"names":["_extends","cx","PropTypes","React","getElementType","getUnhandledProps","ButtonOr","props","className","text","classes","rest","ElementType","createElement","handledProps","propTypes","process","env","NODE_ENV","as","elementType","string","oneOfType","number"],"sources":["/home/runner/work/jeopardy/jeopardy/node_modules/semantic-ui-react/dist/es/elements/Button/ButtonOr.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getElementType, getUnhandledProps } from '../../lib';\n/**\n * Button groups can contain conditionals.\n */\n\nfunction ButtonOr(props) {\n  var className = props.className,\n      text = props.text;\n  var classes = cx('or', className);\n  var rest = getUnhandledProps(ButtonOr, props);\n  var ElementType = getElementType(ButtonOr, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes,\n    \"data-text\": text\n  }));\n}\n\nButtonOr.handledProps = [\"as\", \"className\", \"text\"];\nButtonOr.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Or buttons can have their text localized, or adjusted by using the text prop. */\n  text: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : {};\nexport default ButtonOr;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,EAAE,MAAM,MAAM;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,EAAEC,iBAAiB,QAAQ,WAAW;AAC7D;AACA;AACA;;AAEA,SAASC,QAAQ,CAACC,KAAK,EAAE;EACvB,IAAIC,SAAS,GAAGD,KAAK,CAACC,SAAS;IAC3BC,IAAI,GAAGF,KAAK,CAACE,IAAI;EACrB,IAAIC,OAAO,GAAGT,EAAE,CAAC,IAAI,EAAEO,SAAS,CAAC;EACjC,IAAIG,IAAI,GAAGN,iBAAiB,CAACC,QAAQ,EAAEC,KAAK,CAAC;EAC7C,IAAIK,WAAW,GAAGR,cAAc,CAACE,QAAQ,EAAEC,KAAK,CAAC;EACjD,OAAO,aAAaJ,KAAK,CAACU,aAAa,CAACD,WAAW,EAAEZ,QAAQ,CAAC,CAAC,CAAC,EAAEW,IAAI,EAAE;IACtEH,SAAS,EAAEE,OAAO;IAClB,WAAW,EAAED;EACf,CAAC,CAAC,CAAC;AACL;AAEAH,QAAQ,CAACQ,YAAY,GAAG,CAAC,IAAI,EAAE,WAAW,EAAE,MAAM,CAAC;AACnDR,QAAQ,CAACS,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EAC3D;EACAC,EAAE,EAAEjB,SAAS,CAACkB,WAAW;EAEzB;EACAZ,SAAS,EAAEN,SAAS,CAACmB,MAAM;EAE3B;EACAZ,IAAI,EAAEP,SAAS,CAACoB,SAAS,CAAC,CAACpB,SAAS,CAACqB,MAAM,EAAErB,SAAS,CAACmB,MAAM,CAAC;AAChE,CAAC,GAAG,CAAC,CAAC;AACN,eAAef,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}