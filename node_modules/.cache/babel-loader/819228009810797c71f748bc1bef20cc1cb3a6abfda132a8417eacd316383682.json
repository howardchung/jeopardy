{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A statistic can contain a numeric, icon, image, or text value.\n */\n\nfunction StatisticValue(props) {\n  var children = props.children,\n    className = props.className,\n    content = props.content,\n    text = props.text;\n  var classes = cx(useKeyOnly(text, 'text'), 'value', className);\n  var rest = getUnhandledProps(StatisticValue, props);\n  var ElementType = getElementType(StatisticValue, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\nStatisticValue.handledProps = [\"as\", \"children\", \"className\", \"content\", \"text\"];\nStatisticValue.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n  /** Format the value with smaller font size to fit nicely beside number values. */\n  text: PropTypes.bool\n} : {};\nStatisticValue.create = createShorthandFactory(StatisticValue, function (content) {\n  return {\n    content: content\n  };\n});\nexport default StatisticValue;","map":{"version":3,"names":["_extends","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getElementType","getUnhandledProps","useKeyOnly","StatisticValue","props","children","className","content","text","classes","rest","ElementType","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","contentShorthand","bool","create"],"sources":["/home/runner/work/jeopardy/jeopardy/node_modules/semantic-ui-react/dist/es/views/Statistic/StatisticValue.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A statistic can contain a numeric, icon, image, or text value.\n */\n\nfunction StatisticValue(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      text = props.text;\n  var classes = cx(useKeyOnly(text, 'text'), 'value', className);\n  var rest = getUnhandledProps(StatisticValue, props);\n  var ElementType = getElementType(StatisticValue, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nStatisticValue.handledProps = [\"as\", \"children\", \"className\", \"content\", \"text\"];\nStatisticValue.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Format the value with smaller font size to fit nicely beside number values. */\n  text: PropTypes.bool\n} : {};\nStatisticValue.create = createShorthandFactory(StatisticValue, function (content) {\n  return {\n    content: content\n  };\n});\nexport default StatisticValue;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,EAAE,MAAM,MAAM;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,sBAAsB,EAAEC,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,UAAU,QAAQ,WAAW;AACjI;AACA;AACA;;AAEA,SAASC,cAAc,CAACC,KAAK,EAAE;EAC7B,IAAIC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;IACzBC,SAAS,GAAGF,KAAK,CAACE,SAAS;IAC3BC,OAAO,GAAGH,KAAK,CAACG,OAAO;IACvBC,IAAI,GAAGJ,KAAK,CAACI,IAAI;EACrB,IAAIC,OAAO,GAAGf,EAAE,CAACQ,UAAU,CAACM,IAAI,EAAE,MAAM,CAAC,EAAE,OAAO,EAAEF,SAAS,CAAC;EAC9D,IAAII,IAAI,GAAGT,iBAAiB,CAACE,cAAc,EAAEC,KAAK,CAAC;EACnD,IAAIO,WAAW,GAAGX,cAAc,CAACG,cAAc,EAAEC,KAAK,CAAC;EACvD,OAAO,aAAaR,KAAK,CAACgB,aAAa,CAACD,WAAW,EAAElB,QAAQ,CAAC,CAAC,CAAC,EAAEiB,IAAI,EAAE;IACtEJ,SAAS,EAAEG;EACb,CAAC,CAAC,EAAEZ,aAAa,CAACgB,KAAK,CAACR,QAAQ,CAAC,GAAGE,OAAO,GAAGF,QAAQ,CAAC;AACzD;AAEAF,cAAc,CAACW,YAAY,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,CAAC;AAChFX,cAAc,CAACY,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EACjE;EACAC,EAAE,EAAExB,SAAS,CAACyB,WAAW;EAEzB;EACAf,QAAQ,EAAEV,SAAS,CAAC0B,IAAI;EAExB;EACAf,SAAS,EAAEX,SAAS,CAAC2B,MAAM;EAE3B;EACAf,OAAO,EAAER,eAAe,CAACwB,gBAAgB;EAEzC;EACAf,IAAI,EAAEb,SAAS,CAAC6B;AAClB,CAAC,GAAG,CAAC,CAAC;AACNrB,cAAc,CAACsB,MAAM,GAAG3B,sBAAsB,CAACK,cAAc,EAAE,UAAUI,OAAO,EAAE;EAChF,OAAO;IACLA,OAAO,EAAEA;EACX,CAAC;AACH,CAAC,CAAC;AACF,eAAeJ,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}