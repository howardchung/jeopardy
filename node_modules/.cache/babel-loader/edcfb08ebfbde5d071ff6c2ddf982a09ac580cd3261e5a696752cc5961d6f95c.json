{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\nimport CardDescription from './CardDescription';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\n */\n\nfunction CardContent(props) {\n  var children = props.children,\n    className = props.className,\n    content = props.content,\n    description = props.description,\n    extra = props.extra,\n    header = props.header,\n    meta = props.meta,\n    textAlign = props.textAlign;\n  var classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);\n  var rest = getUnhandledProps(CardContent, props);\n  var ElementType = getElementType(CardContent, props);\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n  if (!childrenUtils.isNil(content)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(CardHeader, function (val) {\n    return {\n      content: val\n    };\n  }, header, {\n    autoGenerateKey: false\n  }), createShorthand(CardMeta, function (val) {\n    return {\n      content: val\n    };\n  }, meta, {\n    autoGenerateKey: false\n  }), createShorthand(CardDescription, function (val) {\n    return {\n      content: val\n    };\n  }, description, {\n    autoGenerateKey: false\n  }));\n}\nCardContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"description\", \"extra\", \"header\", \"meta\", \"textAlign\"];\nCardContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n  /** A card can contain extra content meant to be formatted separately from the main content. */\n  extra: PropTypes.bool,\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardContent;","map":{"version":3,"names":["_extends","_without","cx","PropTypes","React","childrenUtils","createShorthand","customPropTypes","getElementType","getUnhandledProps","SUI","useKeyOnly","useTextAlignProp","CardDescription","CardHeader","CardMeta","CardContent","props","children","className","content","description","extra","header","meta","textAlign","classes","rest","ElementType","isNil","createElement","val","autoGenerateKey","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","contentShorthand","itemShorthand","bool","oneOf","TEXT_ALIGNMENTS"],"sources":["/home/runner/work/jeopardy/jeopardy/node_modules/semantic-ui-react/dist/es/views/Card/CardContent.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\nimport CardDescription from './CardDescription';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\n */\n\nfunction CardContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      description = props.description,\n      extra = props.extra,\n      header = props.header,\n      meta = props.meta,\n      textAlign = props.textAlign;\n  var classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);\n  var rest = getUnhandledProps(CardContent, props);\n  var ElementType = getElementType(CardContent, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(CardHeader, function (val) {\n    return {\n      content: val\n    };\n  }, header, {\n    autoGenerateKey: false\n  }), createShorthand(CardMeta, function (val) {\n    return {\n      content: val\n    };\n  }, meta, {\n    autoGenerateKey: false\n  }), createShorthand(CardDescription, function (val) {\n    return {\n      content: val\n    };\n  }, description, {\n    autoGenerateKey: false\n  }));\n}\n\nCardContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"description\", \"extra\", \"header\", \"meta\", \"textAlign\"];\nCardContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** A card can contain extra content meant to be formatted separately from the main content. */\n  extra: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardContent;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,EAAE,MAAM,MAAM;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,eAAe,EAAEC,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,GAAG,EAAEC,UAAU,EAAEC,gBAAgB,QAAQ,WAAW;AACjJ,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,QAAQ,MAAM,YAAY;AACjC;AACA;AACA;;AAEA,SAASC,WAAW,CAACC,KAAK,EAAE;EAC1B,IAAIC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;IACzBC,SAAS,GAAGF,KAAK,CAACE,SAAS;IAC3BC,OAAO,GAAGH,KAAK,CAACG,OAAO;IACvBC,WAAW,GAAGJ,KAAK,CAACI,WAAW;IAC/BC,KAAK,GAAGL,KAAK,CAACK,KAAK;IACnBC,MAAM,GAAGN,KAAK,CAACM,MAAM;IACrBC,IAAI,GAAGP,KAAK,CAACO,IAAI;IACjBC,SAAS,GAAGR,KAAK,CAACQ,SAAS;EAC/B,IAAIC,OAAO,GAAGxB,EAAE,CAACS,UAAU,CAACW,KAAK,EAAE,OAAO,CAAC,EAAEV,gBAAgB,CAACa,SAAS,CAAC,EAAE,SAAS,EAAEN,SAAS,CAAC;EAC/F,IAAIQ,IAAI,GAAGlB,iBAAiB,CAACO,WAAW,EAAEC,KAAK,CAAC;EAChD,IAAIW,WAAW,GAAGpB,cAAc,CAACQ,WAAW,EAAEC,KAAK,CAAC;EAEpD,IAAI,CAACZ,aAAa,CAACwB,KAAK,CAACX,QAAQ,CAAC,EAAE;IAClC,OAAO,aAAad,KAAK,CAAC0B,aAAa,CAACF,WAAW,EAAE5B,QAAQ,CAAC,CAAC,CAAC,EAAE2B,IAAI,EAAE;MACtER,SAAS,EAAEO;IACb,CAAC,CAAC,EAAER,QAAQ,CAAC;EACf;EAEA,IAAI,CAACb,aAAa,CAACwB,KAAK,CAACT,OAAO,CAAC,EAAE;IACjC,OAAO,aAAahB,KAAK,CAAC0B,aAAa,CAACF,WAAW,EAAE5B,QAAQ,CAAC,CAAC,CAAC,EAAE2B,IAAI,EAAE;MACtER,SAAS,EAAEO;IACb,CAAC,CAAC,EAAEN,OAAO,CAAC;EACd;EAEA,OAAO,aAAahB,KAAK,CAAC0B,aAAa,CAACF,WAAW,EAAE5B,QAAQ,CAAC,CAAC,CAAC,EAAE2B,IAAI,EAAE;IACtER,SAAS,EAAEO;EACb,CAAC,CAAC,EAAEpB,eAAe,CAACQ,UAAU,EAAE,UAAUiB,GAAG,EAAE;IAC7C,OAAO;MACLX,OAAO,EAAEW;IACX,CAAC;EACH,CAAC,EAAER,MAAM,EAAE;IACTS,eAAe,EAAE;EACnB,CAAC,CAAC,EAAE1B,eAAe,CAACS,QAAQ,EAAE,UAAUgB,GAAG,EAAE;IAC3C,OAAO;MACLX,OAAO,EAAEW;IACX,CAAC;EACH,CAAC,EAAEP,IAAI,EAAE;IACPQ,eAAe,EAAE;EACnB,CAAC,CAAC,EAAE1B,eAAe,CAACO,eAAe,EAAE,UAAUkB,GAAG,EAAE;IAClD,OAAO;MACLX,OAAO,EAAEW;IACX,CAAC;EACH,CAAC,EAAEV,WAAW,EAAE;IACdW,eAAe,EAAE;EACnB,CAAC,CAAC,CAAC;AACL;AAEAhB,WAAW,CAACiB,YAAY,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,aAAa,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,CAAC;AAC5HjB,WAAW,CAACkB,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EAC9D;EACAC,EAAE,EAAEnC,SAAS,CAACoC,WAAW;EAEzB;EACArB,QAAQ,EAAEf,SAAS,CAACqC,IAAI;EAExB;EACArB,SAAS,EAAEhB,SAAS,CAACsC,MAAM;EAE3B;EACArB,OAAO,EAAEb,eAAe,CAACmC,gBAAgB;EAEzC;EACArB,WAAW,EAAEd,eAAe,CAACoC,aAAa;EAE1C;EACArB,KAAK,EAAEnB,SAAS,CAACyC,IAAI;EAErB;EACArB,MAAM,EAAEhB,eAAe,CAACoC,aAAa;EAErC;EACAnB,IAAI,EAAEjB,eAAe,CAACoC,aAAa;EAEnC;EACAlB,SAAS,EAAEtB,SAAS,CAAC0C,KAAK,CAAC5C,QAAQ,CAACS,GAAG,CAACoC,eAAe,EAAE,WAAW,CAAC;AACvE,CAAC,GAAG,CAAC,CAAC;AACN,eAAe9B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}