{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isNil from \"lodash-es/isNil\";\nimport _get from \"lodash-es/get\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { createElement } from 'react';\nimport { childrenUtils, createHTMLLabel, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useWidthProp } from '../../lib';\nimport Label from '../../elements/Label';\nimport Checkbox from '../../modules/Checkbox';\nimport Radio from '../../addons/Radio';\n/**\n * A field is a form element containing a label and an input.\n * @see Form\n * @see Button\n * @see Checkbox\n * @see Dropdown\n * @see Input\n * @see Radio\n * @see Select\n * @see Visibility\n */\n\nfunction FormField(props) {\n  var children = props.children,\n    className = props.className,\n    content = props.content,\n    control = props.control,\n    disabled = props.disabled,\n    error = props.error,\n    inline = props.inline,\n    label = props.label,\n    required = props.required,\n    type = props.type,\n    width = props.width,\n    id = props.id;\n  var classes = cx(useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(inline, 'inline'), useKeyOnly(required, 'required'), useWidthProp(width, 'wide'), 'field', className);\n  var rest = getUnhandledProps(FormField, props);\n  var ElementType = getElementType(FormField, props);\n  var errorPointing = _get(error, 'pointing', 'above');\n  var errorLabel = Label.create(error, {\n    autoGenerateKey: false,\n    defaultProps: {\n      prompt: true,\n      pointing: errorPointing,\n      id: id ? id + \"-error-message\" : undefined,\n      role: 'alert',\n      'aria-atomic': true\n    }\n  });\n  var errorLabelBefore = (errorPointing === 'below' || errorPointing === 'right') && errorLabel;\n  var errorLabelAfter = (errorPointing === 'above' || errorPointing === 'left') && errorLabel; // ----------------------------------------\n  // No Control\n  // ----------------------------------------\n\n  if (_isNil(control)) {\n    if (_isNil(label)) {\n      return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        id: id\n      }), childrenUtils.isNil(children) ? content : children);\n    }\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes,\n      id: id\n    }), errorLabelBefore, createHTMLLabel(label, {\n      autoGenerateKey: false\n    }), errorLabelAfter);\n  } // ----------------------------------------\n  // Checkbox/Radio Control\n  // ----------------------------------------\n\n  var ariaDescribedBy = id && error ? id + \"-error-message\" : null;\n  var ariaAttrs = {\n    'aria-describedby': ariaDescribedBy,\n    'aria-invalid': error ? true : undefined\n  };\n  var controlProps = _extends({}, rest, {\n    content: content,\n    children: children,\n    disabled: disabled,\n    required: required,\n    type: type,\n    id: id\n  }); // wrap HTML checkboxes/radios in the label\n\n  if (control === 'input' && (type === 'checkbox' || type === 'radio')) {\n    return /*#__PURE__*/React.createElement(ElementType, {\n      className: classes\n    }, /*#__PURE__*/React.createElement(\"label\", null, errorLabelBefore, /*#__PURE__*/createElement(control, _extends({}, ariaAttrs, controlProps)), \" \", label, errorLabelAfter));\n  } // pass label prop to controls that support it\n\n  if (control === Checkbox || control === Radio) {\n    return /*#__PURE__*/React.createElement(ElementType, {\n      className: classes\n    }, errorLabelBefore, /*#__PURE__*/createElement(control, _extends({}, ariaAttrs, controlProps, {\n      label: label\n    })), errorLabelAfter);\n  } // ----------------------------------------\n  // Other Control\n  // ----------------------------------------\n\n  return /*#__PURE__*/React.createElement(ElementType, {\n    className: classes\n  }, createHTMLLabel(label, {\n    defaultProps: {\n      htmlFor: id\n    },\n    autoGenerateKey: false\n  }), errorLabelBefore, /*#__PURE__*/createElement(control, _extends({}, ariaAttrs, controlProps)), errorLabelAfter);\n}\nFormField.handledProps = [\"as\", \"children\", \"className\", \"content\", \"control\", \"disabled\", \"error\", \"id\", \"inline\", \"label\", \"required\", \"type\", \"width\"];\nFormField.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n  /**\n   * A form control component (i.e. Dropdown) or HTML tagName (i.e. 'input').\n   * Extra FormField props are passed to the control component.\n   * Mutually exclusive with children.\n   */\n  control: PropTypes.oneOfType([PropTypes.elementType, PropTypes.oneOf(['button', 'input', 'select', 'textarea'])]),\n  /** Individual fields may be disabled. */\n  disabled: PropTypes.bool,\n  /** Individual fields may display an error state along with a message. */\n  error: PropTypes.oneOfType([PropTypes.bool, customPropTypes.itemShorthand]),\n  /** The id of the control */\n  id: PropTypes.string,\n  /** A field can have its label next to instead of above it. */\n  inline: PropTypes.bool,\n  // Heads Up!\n  // Do not disallow children with `label` shorthand\n  // The `control` might accept a `label` prop and `children`\n\n  /** Mutually exclusive with children. */\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.object]),\n  /** A field can show that input is mandatory. */\n  required: PropTypes.bool,\n  /** Passed to the control component (i.e. <input type='password' />) */\n  type: customPropTypes.every([customPropTypes.demand(['control']) // don't strictly validate HTML types\n  // a control might be passed that uses a `type` prop with unknown values\n  // let the control validate if for us\n  ]),\n\n  /** A field can specify its width in grid columns */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nexport default FormField;","map":{"version":3,"names":["_extends","_isNil","_get","cx","PropTypes","React","createElement","childrenUtils","createHTMLLabel","customPropTypes","getElementType","getUnhandledProps","SUI","useKeyOnly","useWidthProp","Label","Checkbox","Radio","FormField","props","children","className","content","control","disabled","error","inline","label","required","type","width","id","classes","rest","ElementType","errorPointing","errorLabel","create","autoGenerateKey","defaultProps","prompt","pointing","undefined","role","errorLabelBefore","errorLabelAfter","isNil","ariaDescribedBy","ariaAttrs","controlProps","htmlFor","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","contentShorthand","oneOfType","oneOf","bool","itemShorthand","object","every","demand","WIDTHS"],"sources":["/home/runner/work/jeopardy/jeopardy/node_modules/semantic-ui-react/dist/es/collections/Form/FormField.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isNil from \"lodash-es/isNil\";\nimport _get from \"lodash-es/get\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { createElement } from 'react';\nimport { childrenUtils, createHTMLLabel, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useWidthProp } from '../../lib';\nimport Label from '../../elements/Label';\nimport Checkbox from '../../modules/Checkbox';\nimport Radio from '../../addons/Radio';\n/**\n * A field is a form element containing a label and an input.\n * @see Form\n * @see Button\n * @see Checkbox\n * @see Dropdown\n * @see Input\n * @see Radio\n * @see Select\n * @see Visibility\n */\n\nfunction FormField(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      control = props.control,\n      disabled = props.disabled,\n      error = props.error,\n      inline = props.inline,\n      label = props.label,\n      required = props.required,\n      type = props.type,\n      width = props.width,\n      id = props.id;\n  var classes = cx(useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(inline, 'inline'), useKeyOnly(required, 'required'), useWidthProp(width, 'wide'), 'field', className);\n  var rest = getUnhandledProps(FormField, props);\n  var ElementType = getElementType(FormField, props);\n\n  var errorPointing = _get(error, 'pointing', 'above');\n\n  var errorLabel = Label.create(error, {\n    autoGenerateKey: false,\n    defaultProps: {\n      prompt: true,\n      pointing: errorPointing,\n      id: id ? id + \"-error-message\" : undefined,\n      role: 'alert',\n      'aria-atomic': true\n    }\n  });\n  var errorLabelBefore = (errorPointing === 'below' || errorPointing === 'right') && errorLabel;\n  var errorLabelAfter = (errorPointing === 'above' || errorPointing === 'left') && errorLabel; // ----------------------------------------\n  // No Control\n  // ----------------------------------------\n\n  if (_isNil(control)) {\n    if (_isNil(label)) {\n      return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        id: id\n      }), childrenUtils.isNil(children) ? content : children);\n    }\n\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes,\n      id: id\n    }), errorLabelBefore, createHTMLLabel(label, {\n      autoGenerateKey: false\n    }), errorLabelAfter);\n  } // ----------------------------------------\n  // Checkbox/Radio Control\n  // ----------------------------------------\n\n\n  var ariaDescribedBy = id && error ? id + \"-error-message\" : null;\n  var ariaAttrs = {\n    'aria-describedby': ariaDescribedBy,\n    'aria-invalid': error ? true : undefined\n  };\n\n  var controlProps = _extends({}, rest, {\n    content: content,\n    children: children,\n    disabled: disabled,\n    required: required,\n    type: type,\n    id: id\n  }); // wrap HTML checkboxes/radios in the label\n\n\n  if (control === 'input' && (type === 'checkbox' || type === 'radio')) {\n    return /*#__PURE__*/React.createElement(ElementType, {\n      className: classes\n    }, /*#__PURE__*/React.createElement(\"label\", null, errorLabelBefore, /*#__PURE__*/createElement(control, _extends({}, ariaAttrs, controlProps)), \" \", label, errorLabelAfter));\n  } // pass label prop to controls that support it\n\n\n  if (control === Checkbox || control === Radio) {\n    return /*#__PURE__*/React.createElement(ElementType, {\n      className: classes\n    }, errorLabelBefore, /*#__PURE__*/createElement(control, _extends({}, ariaAttrs, controlProps, {\n      label: label\n    })), errorLabelAfter);\n  } // ----------------------------------------\n  // Other Control\n  // ----------------------------------------\n\n\n  return /*#__PURE__*/React.createElement(ElementType, {\n    className: classes\n  }, createHTMLLabel(label, {\n    defaultProps: {\n      htmlFor: id\n    },\n    autoGenerateKey: false\n  }), errorLabelBefore, /*#__PURE__*/createElement(control, _extends({}, ariaAttrs, controlProps)), errorLabelAfter);\n}\n\nFormField.handledProps = [\"as\", \"children\", \"className\", \"content\", \"control\", \"disabled\", \"error\", \"id\", \"inline\", \"label\", \"required\", \"type\", \"width\"];\nFormField.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /**\n   * A form control component (i.e. Dropdown) or HTML tagName (i.e. 'input').\n   * Extra FormField props are passed to the control component.\n   * Mutually exclusive with children.\n   */\n  control: PropTypes.oneOfType([PropTypes.elementType, PropTypes.oneOf(['button', 'input', 'select', 'textarea'])]),\n\n  /** Individual fields may be disabled. */\n  disabled: PropTypes.bool,\n\n  /** Individual fields may display an error state along with a message. */\n  error: PropTypes.oneOfType([PropTypes.bool, customPropTypes.itemShorthand]),\n\n  /** The id of the control */\n  id: PropTypes.string,\n\n  /** A field can have its label next to instead of above it. */\n  inline: PropTypes.bool,\n  // Heads Up!\n  // Do not disallow children with `label` shorthand\n  // The `control` might accept a `label` prop and `children`\n\n  /** Mutually exclusive with children. */\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.object]),\n\n  /** A field can show that input is mandatory. */\n  required: PropTypes.bool,\n\n  /** Passed to the control component (i.e. <input type='password' />) */\n  type: customPropTypes.every([customPropTypes.demand(['control']) // don't strictly validate HTML types\n  // a control might be passed that uses a `type` prop with unknown values\n  // let the control validate if for us\n  ]),\n\n  /** A field can specify its width in grid columns */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nexport default FormField;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}