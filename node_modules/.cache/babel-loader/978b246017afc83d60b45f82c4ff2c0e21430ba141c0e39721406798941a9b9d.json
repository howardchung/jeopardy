{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps, useValueAndKey } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have a header cell.\n */\n\nfunction TableHeaderCell(props) {\n  var as = props.as,\n    className = props.className,\n    sorted = props.sorted;\n  var classes = cx(useValueAndKey(sorted, 'sorted'), className);\n  var rest = getUnhandledProps(TableHeaderCell, props);\n  return /*#__PURE__*/React.createElement(TableCell, _extends({}, rest, {\n    as: as,\n    className: classes\n  }));\n}\nTableHeaderCell.handledProps = [\"as\", \"className\", \"sorted\"];\nTableHeaderCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** A header cell can be sorted in ascending or descending order. */\n  sorted: PropTypes.oneOf(['ascending', 'descending'])\n} : {};\nTableHeaderCell.defaultProps = {\n  as: 'th'\n};\nexport default TableHeaderCell;","map":{"version":3,"names":["_extends","cx","PropTypes","React","getUnhandledProps","useValueAndKey","TableCell","TableHeaderCell","props","as","className","sorted","classes","rest","createElement","handledProps","propTypes","process","env","NODE_ENV","elementType","string","oneOf","defaultProps"],"sources":["/home/runner/work/jeopardy/jeopardy/node_modules/semantic-ui-react/dist/es/collections/Table/TableHeaderCell.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps, useValueAndKey } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have a header cell.\n */\n\nfunction TableHeaderCell(props) {\n  var as = props.as,\n      className = props.className,\n      sorted = props.sorted;\n  var classes = cx(useValueAndKey(sorted, 'sorted'), className);\n  var rest = getUnhandledProps(TableHeaderCell, props);\n  return /*#__PURE__*/React.createElement(TableCell, _extends({}, rest, {\n    as: as,\n    className: classes\n  }));\n}\n\nTableHeaderCell.handledProps = [\"as\", \"className\", \"sorted\"];\nTableHeaderCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A header cell can be sorted in ascending or descending order. */\n  sorted: PropTypes.oneOf(['ascending', 'descending'])\n} : {};\nTableHeaderCell.defaultProps = {\n  as: 'th'\n};\nexport default TableHeaderCell;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,EAAE,MAAM,MAAM;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,iBAAiB,EAAEC,cAAc,QAAQ,WAAW;AAC7D,OAAOC,SAAS,MAAM,aAAa;AACnC;AACA;AACA;;AAEA,SAASC,eAAe,CAACC,KAAK,EAAE;EAC9B,IAAIC,EAAE,GAAGD,KAAK,CAACC,EAAE;IACbC,SAAS,GAAGF,KAAK,CAACE,SAAS;IAC3BC,MAAM,GAAGH,KAAK,CAACG,MAAM;EACzB,IAAIC,OAAO,GAAGX,EAAE,CAACI,cAAc,CAACM,MAAM,EAAE,QAAQ,CAAC,EAAED,SAAS,CAAC;EAC7D,IAAIG,IAAI,GAAGT,iBAAiB,CAACG,eAAe,EAAEC,KAAK,CAAC;EACpD,OAAO,aAAaL,KAAK,CAACW,aAAa,CAACR,SAAS,EAAEN,QAAQ,CAAC,CAAC,CAAC,EAAEa,IAAI,EAAE;IACpEJ,EAAE,EAAEA,EAAE;IACNC,SAAS,EAAEE;EACb,CAAC,CAAC,CAAC;AACL;AAEAL,eAAe,CAACQ,YAAY,GAAG,CAAC,IAAI,EAAE,WAAW,EAAE,QAAQ,CAAC;AAC5DR,eAAe,CAACS,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EAClE;EACAV,EAAE,EAAEP,SAAS,CAACkB,WAAW;EAEzB;EACAV,SAAS,EAAER,SAAS,CAACmB,MAAM;EAE3B;EACAV,MAAM,EAAET,SAAS,CAACoB,KAAK,CAAC,CAAC,WAAW,EAAE,YAAY,CAAC;AACrD,CAAC,GAAG,CAAC,CAAC;AACNf,eAAe,CAACgB,YAAY,GAAG;EAC7Bd,EAAE,EAAE;AACN,CAAC;AACD,eAAeF,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}